import logging
import os
from collections import Counter
from contextlib import suppress

from aiogram import F, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest

import config
from states import TestStates
from model_utils import (
    get_prediction,
    get_author_name
)
from utils import sanitize_filename

logger = logging.getLogger(__name__)


async def command_start_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç."""
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç!", callback_data="start_test")]
    ])
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø—Ä–æ–±—É–µ—Ç —É–≥–∞–¥–∞—Ç—å, –Ω–∞ –∫–æ–≥–æ –∏–∑ –º–æ–∏—Ö –¥—Ä—É–∑–µ–π "
        "—Ç—ã –ø–æ—Ö–æ–∂ –ø–æ —Å—Ç–∏–ª—é –ø–∏—Å—å–º–∞.\n\n"
        "–Ø –∑–∞–¥–∞–º 10 –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π –Ω–∞ –Ω–∏—Ö —Ç–µ–∫—Å—Ç–æ–º, "
        "—Å—Ç–∞—Ä–∞—è—Å—å –ø–∏—Å–∞—Ç—å —Ç–∞–∫, –∫–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ –æ–±—â–∞–µ—à—å—Å—è.\n\n"
        "–ì–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å?",
        reply_markup=keyboard
    )


async def start_test_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç."""
    await query.answer()

    with suppress(TelegramBadRequest):
        await query.message.edit_text(
            text=f"{query.message.text}\n\n–û—Ç–ª–∏—á–Ω–æ! –ü–æ–µ—Ö–∞–ª–∏.",
            reply_markup=None
        )

    await state.update_data(question_index=0, answers=[], predictions=[])

    await state.set_state(TestStates.answering)

    await query.message.answer(config.QUESTIONS[0])


async def handle_answer(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ,
    –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∑–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–¥–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–∏.
    """
    user_answer = message.text
    user_info = message.from_user

    if user_info and user_answer and user_answer.strip():
        base_filename = f"{user_info.id}_{user_info.username or user_info.first_name or 'user'}"
        safe_filename = sanitize_filename(base_filename) + ".txt"
        file_path = os.path.join(config.ANSWERS_DIR, safe_filename)
        try:
            with open(file_path, 'a', encoding='utf-8') as f:
                f.write(user_answer.strip() + "\n\n")
        except IOError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª {file_path}: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–∞–π–ª: {e}")

    data = await state.get_data()
    current_index = data.get("question_index", 0)
    answers = data.get("answers", [])
    predictions = data.get("predictions", [])

    answers.append(user_answer)

    predicted_id, _ = get_prediction(user_answer)
    if predicted_id != -1:
        predictions.append(predicted_id)
    else:
        logger.warning(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info.id} –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ.")

    next_index = current_index + 1

    if next_index < 10:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
        await state.update_data(question_index=next_index, answers=answers, predictions=predictions)
        await message.answer(config.QUESTIONS[next_index])
        await state.set_state(TestStates.answering)
    else:

        await message.answer("–°–ø–∞—Å–∏–±–æ! –¢—ã –æ—Ç–≤–µ—Ç–∏–ª(–∞) –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –°–µ–π—á–∞—Å —è –ø–æ–¥—É–º–∞—é...")

        if not predictions:
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã (–Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—Ç–∏–ª—è). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ /start")
            await state.clear()
            return

        vote_counts = Counter(predictions)
        most_common_list = vote_counts.most_common(1)

        winner_id = most_common_list[0][0]
        winner_author = get_author_name(winner_id)

        result_text = f"–ì–æ—Ç–æ–≤–æ! ‚ú®\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã, —è –¥—É–º–∞—é, —á—Ç–æ —Ç–≤–æ–π —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ—Ö–æ–∂ –Ω–∞ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è **{winner_author}** –≤ –Ω–∞—à–∏—Ö —á–∞—Ç–∞—Ö."

        details = "\n\n(–î–µ—Ç–∞–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n"
        for author_id, count in vote_counts.most_common():  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–∞
            author_name = get_author_name(author_id)
            details += f"- {author_name}: {count} —Ä–∞–∑(–∞)\n"
        details += ")"
        result_text += details

        await message.answer(result_text, parse_mode=ParseMode.MARKDOWN)

        await state.clear()


async def handle_wrong_answer_type(message: Message, state: FSMContext):
    """–†—É–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –≤–æ–ø—Ä–æ—Å."""
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—Å—Ç–æ–º.")

    data = await state.get_data()
    current_index = data.get("question_index", 0)

    if 0 <= current_index < 10:
        await message.answer(config.QUESTIONS[current_index])


def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ."""
    dp.message.register(command_start_handler, CommandStart())
    dp.callback_query.register(start_test_callback, F.data == "start_test")
    dp.message.register(handle_answer, TestStates.answering, F.text)
    dp.message.register(handle_wrong_answer_type, TestStates.answering)
    logger.info("–•–µ–Ω–¥–ª–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
